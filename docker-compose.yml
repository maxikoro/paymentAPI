services:
  payment-service:
    container_name: payment-service
    build:
      context: .  # Укажите корневую директорию проекта
      dockerfile: ./payment-service/Dockerfile  # Укажите путь к Dockerfile относительно корневой директории
    # ports:
    #   - 8011:8000
    restart: always
    environment:
      # - DATABASE_URL=postgresql://paymentuser:s3cure@db:5432/paymentdb
      - KAFKA_URL=kafka
    depends_on:
      - kafka-init
      - db

  updater-service:
    container_name: updater-sevice
    build:
      context: .  # Укажите корневую директорию проекта
      dockerfile: ./updater-service/Dockerfile  # Укажите путь к Dockerfile относительно корневой директории
    ports:
      - 8011:8000
    restart: always
    environment:
      - DATABASE_URL=postgresql://paymentuser:s3cure@db:5432/paymentdb
      - KAFKA_URL=kafka
    depends_on:
      - kafka-init
      - db

  main-api:
    container_name: main-api
    build:
      context: .  # Укажите корневую директорию проекта
      dockerfile: ./mainAPI/Dockerfile  # Укажите путь к Dockerfile относительно корневой директории
    ports:
      - 8010:8000
    restart: always
    environment:
      - DATABASE_URL=postgresql://paymentuser:s3cure@db:5432/paymentdb
      - KAFKA_URL=kafka
    depends_on:
      - kafka-init
      - db

  nextjs-app:
    build:
      context: ./webui
      dockerfile: Dockerfile
    ports:
      - '4000:3000'
    depends_on:
      - kafka-init
      - db

  kafka-init:
    build:
      context: ./kafka-init
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy

  # kafka-init:
  #   image: bitnami/kafka
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   entrypoint: [ '/bin/sh', '-c' ]
  #   command: |
  #     "
  #     # blocks until kafka is reachable
  #     kafka-topics.sh --bootstrap-server kafka:9092 --list
  #     echo -e 'Creating Kafka topics'
  #     kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic topic1 --replication-factor 1 --partitions 2
  #     echo -e 'Successfully created the following topics:'
  #     kafka-topics.sh --bootstrap-server kafka:9092 --list
  #     "

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9094:9094'
    restart: always
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--version"] #"--bootstrap-server=localhost:9092", "--list"]
      interval: 40s
      timeout: 30s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8080:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      # - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka-init

  db:
    image: postgres
    container_name: db
    ports:
      - "35432:5432"
    restart: always
    volumes:
      - ./init-payment-db.sh:/docker-entrypoint-initdb.d/init-payment-db.sh
    # set shared memory limit when using docker-compose
    # shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: example